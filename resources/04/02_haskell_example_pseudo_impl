-- class CanEq
data CanEqD a = CanEqDictionary {
    eq  :: a -> a -> Bool,
    neq :: a -> a -> Bool,
}

eqBool :: Bool -> Bool -> Bool
eqBool True True = True
eqBool False False = True
eqBool _ _  = False

neqBool :: Bool -> Bool -> Bool
neqBool x y = not (eqBool x y)

-- instance CanEq Bool
boolCanEq :: CanEqD Bool
boolCanEq = CanEqDictionary {
    eq  = eqBool,
    neq = neqBool
}

-- memberOf :: CanEq t => t -> [t] -> Bool
memberOf :: (CanEqD t) -> t -> [t] -> Bool
memberOf d x ys = not $ null $ filter (\y -> eq d x y) 