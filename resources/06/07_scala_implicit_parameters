trait Monoid[A] {
    def unit: A
    def add(x: A, y: A): A    
}

object MonoidTest {
    implicit object StringMonoid extends Monoid[String] {
        def unit: String = ""
        def add(x: String, y: String): String = x concat y
    }
    
    implicit object DoubleMonoid extends Monoid[Double] {
        def unit: Double = 0  
        def add(x: Double, y: Double): Double = x + y
    }

    def sum[A](xs: List[A])(implicit m: Monoid[A]): A =
        if (xs.isEmpty) m.unit
        else m.add(xs.head, sum(xs.tail))
}